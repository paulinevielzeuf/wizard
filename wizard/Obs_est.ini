[runtime]
; The test sampler just runs a single parameter set
sampler = test
root = ${COSMOSIS_SRC_DIR}
[test]


save_dir=out

fatal_errors=T

;If you have the python package "pygraphviz" installed you can
;generate a graphical representation of your pipeline by
;uncommenting this:
;graph=graph.dot
;and afterwards running the command:
; dot -Tpng -o graph.png graph.dot

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
modules = consistency camb halofit extrapolate_power load_nz luminosity_slope growth_factor apply_bias angular_power  2pt_shear    2pt_matter  2pt_galgal
values = values_obs_est.ini


likelihoods =
extra_output =

; We can get a little more output during the run by setting some values
quiet=F
timing=T
debug=F

[consistency]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/utility/consistency/consistency_interface.py


[camb]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

[halofit]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/halofit/halofit_module.so

[extrapolate_power]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

; This is an example of a very simple module - it simple loads in
; a file once at the start when setting up and supplies fixed data
; when executed.
[load_nz]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath =./n_of_z.txt


; The magnification spectrum is sensitive to the slope of the luminosity number
; count function.  This module uses a fitting function for the slope alpha.
[luminosity_slope]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/luminosity_function/Joachimi_Bridle_alpha/interface.py
magnitude_limit = 24.0
binned_alpha = T


[growth_factor]
File: ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/structure/growth_factor/interface.so
zmin=0.1
zmax=4.0
dz=0.005

[apply_bias]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/clerkin/clerkin_interface.py
mode = both
model =gtd


[angular_power]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/spectra/interface.so
n_ell = 100
ell_min = 10.0
ell_max = 100000.0
shear_shear = T
intrinsic_alignments = F
matter_spectra = T
ggl_spectra = T
gal_IA_cross_spectra = F
mag_gal_cross_spectra = F
mag_mag = F





;This Nicaea code converts C_ell into xi(theta).
;It is fast and accurate but requires a high ell_max, as shown above
[2pt_shear]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = shear_cl
output_section_name = shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 0


[2pt_matter]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = matter_cl
output_section_name = matter_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1



[2pt_galgal]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = ggl_cl
output_section_name = ggl_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 2

; The consistency module translates between our chosen parameterization
; ; and any other that modules in the pipeline may want (e.g. camb)
; [consistency]
; file = cosmosis-standard-library/utility/consistency/consistency_interface.py
